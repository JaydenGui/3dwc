<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <title>The 3D Web Coder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="3dwc.css"/>
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
</head>
<body>

<h3>Hosting a Node Server on Heroku</h3>

<p>Lots of topics lined up for today!</p>

<p>The real meat that we are hungering for is hosting and running our node app live on the web.</p>

<p>There's much more, though:</p>

<ul>
<li><a href="#2">Hosting The 3D Web Coder source HTML and index on GitHub pages</a></li>
<li><a href="#3">A <b>much</b> cooler GitHub pages sample</a></li>
<li><a href="#4">The 3D web is happening here and now</a></li>
<li><a href="#5">The Milan WebGL Workshop</a></li>
<li><a href="#6">Hosting a node server on Heroku</a></li>
<li><a href="#7">Testing a node server live on this page</a></li>
</ul>



<a name="2"></a>

<h4>Hosting The 3D Web Coder Source HTML and Index on GitHub Pages</h4>

<p>Before getting to the coding side of things, let me mention some handy file management, documentation and search advantages that I gain by making use of the

<a href="https://pages.github.com/">GitHub Pages</a> functionality.</p>

<p>All of the HTML sources for The 3D Web Coder live in the

<a href="https://github.com/jeremytammik/3dwc">3dwc GitHub repository</a>,

so you can clone that to copy all the HTML source to your own local system for simple and efficient global searches, etc.</p>

<p>You can also chip in and help me improve it if you find any typos or bugs!</p>

<p>The project also includes a global

<a href="https://github.com/jeremytammik/3dwc/blob/gh-pages/index.htm">blog post index</a> that

is updated for every new post.</p>

<p>The posts are consecutively numbered for easier reference, just like I have been doing since 2008 for the older sibling blog

<a href="http://thebuildingcoder.typepad.com">The Building Coder</a>.</p>

<p>This post here and now is number 0006.
The current post number for The Building Coder is 1300 &nbsp; :-)</p>

<p>For The Building Coder, though, so far, I only use the index and internal numbering for my own personal use, since its HTML sources include some occasional snippets of confidential information.</p>

<p>For The 3D Web Coder, you can use the global index to navigate your local copy of the repository.</p>

<p>Much more exciting, though, is the fact that the 3dwc GitHub repository uses the <code>gh-pages</code> branch and thus is automatically published to the web every time a new commit is pushed.</p>

<p>Therefore, you can look at the global index file &ndash; and all the other HTML source files too, of course &ndash; live on the web, directly in GitHub.</p>

<p>The index file, for instance, is accessible like this:</p>

<p style="text-align:center">
<a href="http://jeremytammik.github.io/3dwc">jeremytammik.github.io/3dwc</a>
</p>

<p>The index lists the following data for each post:</p>

<ul>
<li>Number</li>
<li>Date</li>
<li>Title linked to the live blog page</li>
<li>Link to the HTML source file on GitHub or your local copy</li>
<li>Categories</li>
</ul>

<p>As said, every time I push to the GitHub repository, the files and web site displayed are all automatically updated.</p>

<p>I hope you find this useful.</p>

<p>Dear Reader of The Building Coder, please yell hard enough and I promise to do my best to publish the HTML sources and global index for that as well in a similar fashion.</p>


<a name="3"></a>

<h4>A Cooler GitHub Pages Sample &ndash; developer-autodesk.github.io</h4>

<p>If you like the idea of hosting your web site directly on GitHub, enabling easy access to modify content simply by pushing from the command line, support for an unlimited number of collaborators, and all the other goodies the technology supports, you will love this beautiful sample illustrating the

<a href="https://developer.autodesk.com">Autodesk View and Data API</a>:</p>

<ul>
<li>GitHub sources at
<a href="https://github.com/Developer-Autodesk">Developer-Autodesk</a>
&gt; <a href="https://github.com/Developer-Autodesk/Developer-Autodesk.github.io">Developer-Autodesk.github.io</a></li>
<li>Resulting web page at <a href="http://developer-autodesk.github.io">developer-autodesk.github.io</a></li>
</ul>


<a name="4"></a>

<h4>The 3D Web is Happening Here and Now</h4>

<p>Do you love open source and non-proprietary stuff?</p>

<p>Are you sensitive to the 3D web being a proprietary thing?</p>

<p>Well, it is not.</p>

<p>WebGL is everywhere, free, open, for everyone, and fast becoming an industry-wide global movement.</p>

<p>One nice example is this

<a href="http://customiser.pennyskateboards.com.au">skateboard customizer</a>.</p>

<p>It works beautifully on any of your browsers, whether mobile or desktop and does a great job making it simple to use with a mouse or a touch screen.</p>

<p>Some more traditional samples are

<a href="https://sketchfab.com">SketchFab</a> and

<a href="http://www.cl3ver.com">CL3VER</a>.</p>

<p>You can also easily grab content from one site, e.g. furniture in SketchUp SKP format from

<a href="http://www.hermanmiller.com/products/seating/performance-work-chairs/aeron-chairs.html">Herman-Miller</a> and

view it in real time on another, e.g. <a href="http://www.autodesk.com/viewers">www.autodesk.com/viewers</a>.</p>

<p>The 3D web is happening <b><i>now</i></b>, and it's the whole industry.</p>

<p>Advance your career by being a leader bringing 3D to your business &ndash; or get left behind with a stale 2D web site.</p>



<a name="5"></a>

<h4>The Milan WebGL Workshop</h4>

<p>Some news from the Milanese 3D web scene:</p>

<p>We are holding a series of hands-on workshops about WebGL.</p>

<p>We opted for an educational approach, addressing people with only a basic understanding of coding, JavaScript, and zero 3D experience; there will be small groups, each one with a "coach" at a 1-to-4 or 1-to-5 ratio.</p>

<p>Here is the <a href="https://hackpad.com/Milan-WebGL-Workshop-ilqFmBXiVt0">Milan WebGL Workshop meeting draft</a>.</p>

<p>Feedback is welcome!</p>


<a name="6"></a>

<h4>Hosting a Node Server on Heroku</h4>

<p>Working our way towards our first full-fledged web application, we looked at the following steps so far:</p>

<ul>
<li><a href="http://the3dwebcoder.typepad.com/blog/2015/03/the-brackets-editor.html">The web enabled Brackets editor</a></li>
<li><a href="http://the3dwebcoder.typepad.com/blog/2015/03/the-nodejs-server-platform-icons-3d-and-the-future.html">The Node.js server platform</a></li>
<li><a href="http://the3dwebcoder.typepad.com/blog/2015/03/preparing-for-processing-query-string-server-arguments.html">Sample JavaScript function to process query strings</a></li>
<li><a href="http://the3dwebcoder.typepad.com/blog/2015/03/processing-query-strings-in-javascript-and-node.html">Processing query strings in JavaScript and Node</a></li>
</ul>

<!--
<h4>Enhancing our Node Server</h4>
<p>Before running our brand new little node server live on the web, let's add one small additional enhancement, to ask it to generate either the raw jumbled text like before, or HTML for a more pleasant viewing experience.</p>
-->

<p>Now I want to host and run my server live and accessible on the big wild worldwide web using

<a href="http://www.herokuapp.com">Heroku</a>.</p>

<p>Once I have that in place, I can start implementing interesting things like 2D and 3D graphics display that can be driven from a desktop application or anywhere else I choose.</p>

<p>So here goes, assuming you have

<a href="http://nodejs.org">Node.js</a> and

<a href="https://github.com/npm/npm#synopsis">npm</a> already installed:</p>

<ul>
<li>Sign in to <a href="http://www.heroku.com">Heroku</a>.</li>
<li>Select 'Node.js Get Started' and work through the steps.</li>
<li><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up">Set up</a> and install Heroku toolbelt for your system</li>
<li><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#prepare-the-app">Prepare the app</a> by cloning from node-js-getting-started</li>
<li><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#deploy-the-app">Deploy the app</a> in four simple steps</li>
</ul>

<p>Voila!</p>

<p>My sample is live at the automatically generated URL <a href="https://stark-island-7518.herokuapp.com">stark-island-7518.herokuapp.com</a>.</p>

<p>That took about ten minutes.</p>

<p>The initial Heroku getting started app uses <a href="http://expressjs.com">express</a> and just says 'Hello World!'</p>

<pre class="prettyprint">
var express = require('express');
var app = express();

app.set('port', (process.env.PORT || 5000));
app.use(express.static(__dirname + '/public'));

app.get('/', function(request, response) {
  response.send('Hello World!');
});

app.listen(app.get('port'), function() {
  console.log("Node app is running at localhost:" + app.get('port'));
});
</pre>

<p>I replaced it by

<a href="http://the3dwebcoder.typepad.com/blog/2015/03/processing-query-strings-in-javascript-and-node.html#4">
my own server code</a> and

added the <code>dict_to_string</code> JavaScript function to display the query string arguments:</p>

<pre class="prettyprint">
function pluralSuffix( n ) {
  return 1 == n ? '' : 's';
}

function dotOrColon( n ) {
  return 0 == n ? '.' : ':';
}

// format dictionary values to a string

function dict_to_string(dict) {
  var keys = Object.keys(dict);
  var n = keys.length;
  var s = [];

  s.push( n.toString() + ' key-value pair'
         + pluralSuffix( n ) + dotOrColon( n ) );

  keys.sort();
  for( var i = 0; i < n; ++i ) {
    s.push( '  ' + keys[i] + ' = ' + dict[keys[i]] );
  }
  return s.join('\n');
}

http = require('http'),
url = require('url'),
server = http.createServer(
  function(request,response){
    var paramdict = url.parse(request.url,true).query;
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.end(dict_to_string(paramdict));
  });
server.listen(1337, '127.0.0.1');
console.log('Server running at http://127.0.0.1:1337/');
</pre>

<p>I cannot simply use the command line <code>git push</code> to update it on GitHub, though.</p>

<p>An attempt to do so causes an error:</p>

<blockquote>
remote: Permission to heroku/node-js-getting-started.git denied to jeremytammik.
<br/>fatal: unable to access 'https://github.com/heroku/node-js-getting-started.git/': The requested URL returned error: 403
</blockquote>

<p>Using <code>git push heroku master</code> does the trick.</p>

<p>Well, actually not quite. An application error occurred. Good thing I still have the getting started guide open and can

<a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#view-logs">view my logs</a>.</p>

<p>In the log file, I see the error 'Error R10 (Boot timeout) -> Web process failed to bind to $PORT within 60 seconds of launch'.</p>

<p>That makes total sense, since I can see that the express version of the server calls <code>app.set('port', (process.env.PORT || 5000));</code>, whereas my non-express version does not.</p>

<p>Meseems the simplest solution will be to graft my <code>dict_to_string</code> into the original Heroku express node server sample.</p>

<p>The server implementation now looks like this, plus the unchanged <code>dict_to_string</code> definition, of course:</p>

<pre class="prettyprint">
var express = require('express');
var url = require('url');

var app = express();

app.set('port', (process.env.PORT || 5000));
app.use(express.static(__dirname + '/public'));

app.get('/', function(request, response) {
  var paramdict = url.parse(request.url,true).query;
  response.send(dict_to_string(paramdict));
});

app.listen(app.get('port'), function() {
  console.log("Node app is running at localhost:" + app.get('port'));
});
</pre>

<p>Lo and behold, it works!</p>

<center>
<img src="img/node_server_on_heroku.png" alt="Node server on Heroku" width="455"/>
</center>

<p>Here is the entire server script index.js renamed to <a href="files/node_index_query_string.js">node_index_query_string.js</a>.</p>



<a name="7"></a>

<h4>Testing a Node Server Running Live on the Web Live on this Page</h4>

<p>Now it is globally accessible, we can test it right here from this page.</p>

<p>First, I'll implement a couple of minimal JavaScript functions to clean up your input for you and massage it into a valid query string to append to the Heroku server URL:</p>

<pre class="prettyprint">
function cleanup_key_or_value(s) {
  return s
    .replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()]/g,"")
    .replace(/^\s+|\s+$/g,"");
}

function cleanup_key_value_pair(pair) {
  kv = pair.split('=').map(cleanup_key_or_value);
  return kv.join('=')
}

function make_query_string(s) {
  pairs = s.split(',').map(cleanup_key_value_pair);
  return pairs.join('&');
}

function submit_form(s)
{
  base_url = 'https://stark-island-7518.herokuapp.com/';
  query_string = make_query_string( s );
  window.open(base_url + '?' + query_string,
              'node_server','width=600,height=100');
}
</pre>

<p>Now, the following form just has to call <code>submit_form(this.form.input.value)</code> when the button is clicked:</p>

<script>
function cleanup_key_or_value(s) {
  return s
    .replace(/[\.,-\/#!$%\^&\*;:{}=\-_`~()]/g,"")
    .replace(/^\s+|\s+$/g,"");
}

function cleanup_key_value_pair(pair) {
  kv = pair.split('=').map(cleanup_key_or_value);
  return kv.join('=')
}

function make_query_string(s) {
  pairs = s.split(',').map(cleanup_key_value_pair);
  return pairs.join('&');
}

function submit_form(s)
{
  base_url = 'https://stark-island-7518.herokuapp.com/';
  query_string = make_query_string( s );
  window.open(base_url + '?' + query_string,
              'node_server','width=600,height=100');
}
</script>

<center>
<form>
  <p>Input a couple of comma-separated key=value pairs, e.g.:</p>
  <textarea name="input" rows="5" cols="50">a=42, b=harry</textarea>
  <br/>
  <input value="Submit as query string" type="button"
         onClick="submit_form(this.form.input.value)" />
</form>
</center>

<p>See? It really does work.</p>

</body>
</html>
