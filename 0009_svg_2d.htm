<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <title>The 3D Web Coder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="3dwc.css"/>
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
</head>
<body>

<!--

Daniel Du, Michael Han, Shiya Luo, Kevin Vandecar: Re: viewer on mobile devices?

#3dwebcoder @jeremytammik #3dweb #3dviewapi #html5 #threejs #webgl #vr

-->

<h3>Displaying 2D Graphics via a Node Server</h3>

<p>Now that our node.js web server is

<a href="http://the3dwebcoder.typepad.com/blog/2015/03/hosting-a-node-server-on-heroku-pages-and-3d-web.html#6">
hosted by Heroku</a>,

<a href="http://the3dwebcoder.typepad.com/blog/2015/03/hosting-a-node-server-on-heroku-pages-and-3d-web.html#7">
running live on the web</a>,

and even

<a href="http://the3dwebcoder.typepad.com/blog/2015/04/a-proggen-web-service-program-generator-node-server.html">
generating nonsensical source code</a> in

six different programming languages for April 1<sup>st</sup>, let's move on to something more interesting and graphical.</p>

<p>First, briefly, a couple of other short news items and topics of general and personal interest:</p>

<ul>
<li><a href="#2">WebGL 3D model viewing on mobile devices</a></li>
<li><a href="#3">A360 drag and drop viewer</a></li>
<li><a href="#3.1">View and Data API design file formats</a></li>
<li><a href="#4">Useful JavaScript Resources</a></li>
<li><a href="#5">Augmented reality</a></li>
<li><a href="#6">Is Angular bad?</a></li>
<li><a href="#7">Displaying 2D graphics via a node server</a></li>
</ul>


<a name="2"></a>

<h4>WebGL 3D Model Viewing on Mobile Devices</h4>

<p><strong>Question:</strong>

What is the current status of WebGL viewers on mobile devices?</p>

<p>What phone will run VR demos for Google cardboard or Dodocase?</p>

<p>I have access to an iPhone 5 (my wife's), but could not get viewer to run there.</p>

<p>I also notice that my Android Samsung tablet does not run it currently.</p>

<p>The general WebGL site says it is not compatible with the device's graphics.</p>

<p>I am thinking of going out to buy a used Android phone and just use it's wi-fi for this; however, I want to be sure it will work.</p>

<p>What about iPod?</p>

<p>Will that work in the Dodocase?</p>

<p>I have a Windows phone (yeah, go ahead and laugh).</p>

<p>Interestingly enough, it appears to get me the closest to working.</p>

<p>The iPhone 5 won't display anything but the frame, the Android tablet fails with error, but the Windows Phone will display the viewer controls, and the flashing dots.</p>

<p>It just never gets to the model view.</p>

<p>In all the tests I made I used the Chrome or native browser, cleared its cache, etc. but with little mobile success.</p>

<p>The iPad Mini seems to run it with Chrome, but it's not mini enough for the Dodocase.</p>



<p><strong>Answer 1:</strong>

The reason iPhone 5 is not supported is probably because WebGL wasn't on Apple's agenda for that release.
iOS 8 is the one that claims full support, and that's when iPhone 6/6 plus came out. I personally have the viewer working on iPhone 5S and 6. Whether the viewer works well or not also depends on the model – if you try to load a huge model, it's just going to eat up memory, and that may crash the phone.</p>

<p>Same with Android, you'll get a better chance with a phone that came with 5.x or Chromium 40, since the hardware is most likely to be tailored to work with WebGL support as well.</p>

<p>I have little experience with Windows Phone development, so I can't comment much on that.</p>

<p>Keep in mind that iOS 8 came out only 6 months ago; as people upgrade their phone mobile support will happen in time.</p>

<p>Lots of teams are expressing interest in using WebGL viewers now that the mobile situation seems promising.</p>

<p><strong>Answer 2:</strong>

The WebGL viewers on mobile browsers has been supported since end of last year after the team added touch support that solves the major user interaction issues. It should run fine on mobile devices whose web browser has capabilities to support WebGL and web worker. Typically, a mobile browser that satisfy both constraints would also satisfy the other WebGL web viewer requirements, e.g., typed array, so explicitly checking WebGL and web worker support is enough. At this moment, the device that provides the best experience on a mobile browser is Nexus 9 and IPAD AIR 2.  As already pointed out, mobile devices have memory constraints and for now our viewer has no out of core capability or view dependent loading of geometry, so for large models (typical for BIM or Plant), out of memory and crash of mobile browser is not uncommon. Handling large models on mobile device is part of our plan, so we'll get better mobile support as we go on.</p>

<p><strong>Answer 3:</strong>

I have an iPad3. I updated it to iOS 8 and the viewer runs fine on it in Safari.</p>

<p>The iPhone 5 device is OK if you decide to upgrade to iOS 8.</p>





<a name="3"></a>

<h4>A360 Drag and Drop Viewer</h4>

<p>The new <a href="https://360.autodesk.com/viewer">A360 drag and drop viewer</a> enables you to and share designs without any sign-up or plugin installation whatsoever.</p>

<p>It also includes new capabilities to handle large and complex CAD files linking in external references.</p>

<p>Over 50 design file types are supported, including AutoCAD:</p>

<center>
<img src="img/a360_viewer_file_types.png" alt="A360 viewer design file types" width="400"/>
</center>


<a name="3.1"></a>

<h4>View and Data API Design File Formats</h4>

<p>This resembles the list of design file formats supported by the

<a href="https://developer.autodesk.com/">View and Data API</a>.</p>

<p>You can generate an up-to-date list of those yourself at any time using the

<a href="https://developer.autodesk.com/api/view-and-data-api/#supported-api">Supported API</a>.</p>

<p>A suitable CURL command is shown in the

<a href="https://developer.autodesk.com/api/view-and-data-api/#step-4-upload-a-file">step 4 &ndash; upload a file</a>:</p>

<pre>
$ curl  -k --header
  "Authorization: Bearer QOeHrJWR3CQS49oD33UCTrFbm7HZ"
  https://developer.api.autodesk.com/viewingservice/v1/supported
{"extensions":["ipt","neu","stla","stl","xlsx","jt","jpg",
"skp","prt","dwf","xls","png","sldasm","step","dwg","zip",
"nwc","model","sim","stp","ste","f3d","pdf","iges","dwt",
"catproduct","csv","igs","sldprt","cgr","3dm","sab","obj",
"pptx","cam360","jpeg","bmp","gbxml","exp","ppt","doc",
"wire","ige","rcp","txt","dae","x_b","3ds","rtf","rvt",
"g","sim360","iam","asm","dlv3","x_t","pps","session",
"xas","xpr","docx","catpart","stlb","tiff","nwd","sat",
"fbx","smb","smt","ifc","dwfx","tif"],
"channelMapping":{"ipt":"viewing-inventor-lmv", ... }}
</pre>

<p>Massaged with a snippet of Python code, it generates the following sorted list:</p>

<pre>
  ['3dm', '3ds', 'asm', 'bmp', 'cam360', 'catpart',
  'catproduct', 'cgr', 'csv', 'dae', 'dlv3', 'doc',
  'docx', 'dwf', 'dwfx', 'dwg', 'dwt', 'exp', 'f3d',
  'fbx', 'g', 'gbxml', 'iam', 'ifc', 'ige', 'iges',
  'igs', 'ipt', 'jpeg', 'jpg', 'jt', 'model', 'neu',
  'nwc', 'nwd', 'obj', 'pdf', 'png', 'pps', 'ppt',
  'pptx', 'prt', 'rcp', 'rtf', 'rvt', 'sab', 'sat',
  'session', 'sim', 'sim360', 'skp', 'sldasm',
  'sldprt', 'smb', 'smt', 'ste', 'step', 'stl',
  'stla', 'stlb', 'stp', 'tif', 'tiff', 'txt',
  'wire', 'x_b', 'x_t', 'xas', 'xls', 'xlsx',
  'xpr', 'zip']
</pre>

<!--
Posted on

http://mp.weixin.qq.com/s?__biz=MzAwMTA3OTQ4NQ==&mid=204889632&idx=1&sn=7d1bf4ed2aebf16aedd7a87bf8139d19#rd

and

http://adndevblog.typepad.com/technology_perspective/2015/03/easy-way-to-test-a360-viewer.html

http://adndevblog.typepad.com/cloud_and_mobile/2015/02/drag-and-drop-file-viewing.html

-->


<a name="4"></a>

<h4>Useful JavaScript Resources</h4>

<p>Here are some JavaScript resources that my colleague Philippe finds particularly useful to keep up to date with the trends of the web:</p>

<ul>
<li><a href="http://javascriptweekly.com">javascriptweekly.com</a></li>
<!-- <li><a href="http://dailyjs.com">dailyjs.com</a></li> -->
<li><a href="https://generalassemb.ly/coding/full-stack-web-development">JavaScript learning courses</a></li>
<li><a href="http://wiht.co/javascript-resources">JavaScript resources</a></li>
<li><a href="http://javascriptsource.com">JavaScript cut and paste examples</a></li>
</ul>


<a name="5"></a>

<h4>Augmented Reality</h4>

<p>Check out the cool augmented reality implementation by

<a href="http://www.wakingapp.com">wakingapp.com</a> that

my friend Dan pointed out to me, fresh back from the

<a href="http://www.campustelaviv.com">Campus TLV</a> conference in Israel, e.g., in this

<a href="https://www.youtube.com/watch?v=dHYoNW1oRQU">one-minute video</a>:</p>

<center>
<iframe width="480" height="270" src="https://www.youtube.com/embed/dHYoNW1oRQU" frameborder="0" allowfullscreen></iframe>
</center>


<a name="6"></a>

<h4>Is Angular Bad?</h4>

<p>My colleague Philippe is quite a fan of Angular, meseems, so I thought I should use it too.</p>

<p>On the other hand, I noticed this competent-sounding article by Robert Greyling asking

<a href="https://javascriptkicks.com/articles/2657">Is Angular Bad?</a>,

followed by one on

<a href="https://javascriptkicks.com/articles/3718">why junior developers are learning bad habits from Angular</a> and

concluding:</p>

<blockquote>
<p>I won't be using Angular for my next project...
and neither should you...
as you can see, it’s pretty unlikely I’ll be using Angular in any of my future projects unless v2.0 absolutely blows my socks off.
I’ll more likely end up using <a href="http://ampersandjs.com">Ampersand</a> or maybe I’ll take the brand spanking new <a href="http://aurelia.io">Aurelia</a> for a spin!</p>
</blockquote>

<p>Philippe, what do you think?</p>


<a name="7"></a>

<h4>Displaying 2D Graphics via a Node Server</h4>

<p>As stated, I would like to move into graphical topics as quickly as possible.</p>

<p>Here is a simple starting point, sending a string of polygon coordinate values to a Node server and asking it to render them as a 2D polygon using SVG, <a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">Scalable Vector Graphics</a>.</p>

<p>For instance, here is a red triangle with blue edges, minimally adapted from the World Wide Web Consortium or

<a href="http://www.w3.org">w3.org</a>

<a href="http://www.w3.org/TR/SVG">SVG</a> documentation

<a href="http://www.w3.org/TR/SVG/paths.html#PathData">path data</a> example:</p>

<center>
  <svg width="3cm" height="3cm" viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
  <rect x="1" y="1" width="398" height="398" fill="none" stroke="blue" stroke-width="3" />
  <path d="M 100 100 L 300 100 L 200 300 z" fill="red" stroke="blue" stroke-width="3" />
  </svg>
</center>

<p>Here is the code generating this image:</p>

<pre class="prettyprint">
  &lt;svg width="3cm" height="3cm" viewBox="0 0 400 400"
       xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;

  &lt;rect x="1" y="1" width="398" height="398"
        fill="none" stroke="blue" stroke-width="3" /&gt;

  &lt;path d="M 100 100 L 300 100 L 200 300 z"
        fill="red" stroke="blue" stroke-width="3" /&gt;

  &lt;/svg&gt;
</pre>

<p>One interesting snippet in that code is the graphics path data definition specified by the <code>d</code> attribute of the <code>path</code> tag.</p>

<p>The path data attribute supports three 'commands': M, L and Z, to moveto, lineto and close the path.</p>

<p>Let's implement a node server taking a path definition like that from the URL query string and generating a web page from that on the fly.</p>

<p>For instance, here is a little form enabling you to define a path of your own:</p>

<script>
function submit_form_svg_01(path_data)
{
  var local = false;
  var base_url = local
    ? 'http://127.0.0.1:5000'
    : 'https://shielded-hamlet-1585.herokuapp.com';
  var w = 400;
  var h = 400;
  var d = path_data.replace(' ','+');
  var query_string = 'w='+w+'&h='+h+'&d='+d;
  window.open(base_url + '?' + query_string,
    'node_server', 'width=' + w + ',height = ' + h);
}
</script>

<center>
<form>
  <p>Input an SVG path data definition inside a 100 x 100 square, e.g.:</p>
  <textarea name="input" rows="5" cols="50">M 10 10 L 50 50 L 10 90 L 90 90 L 50 50 L 90 10 Z</textarea>
  <br/>
  <input value="Submit as query string" type="button"
         onClick="submit_form_svg_01(this.form.input.value)" />
</form>
</center>

<p>Here is the entire Heroku node server implementation:</p>

<pre class="prettyprint">
// index.js
//
// 2015-04-08, Jeremy Tammik, Autodesk Inc.
//
// Generated by Heroku node-js-getting-started.
// Added svg_01 implementation.

var svg_template = '\
&lt;svg width="3cm" height="3cm" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1"&gt;\
&lt;rect x="1" y="1" width="98" height="98" fill="none" stroke="blue" stroke-width="3" /&gt;\
&lt;path d="{path_data}" fill="red" stroke="blue" stroke-width="3" /&gt;\
&lt;/svg&gt;';

var express = require('express');
var url = require('url');

var app = express();

app.set('port', (process.env.PORT || 5000));

app.get('/', function(request, response) {
  var paramdict = url.parse(request.url,true).query;
  if( !paramdict.hasOwnProperty('d') )
  {
    response.writeHead(400, {'Content-Type': 'text/plain'});
    response.end('No SVG path description given');
  }
  else
  {
    var d = paramdict['d'];
    var svg = svg_template.replace('{path_data}', d);
    response.writeHead(200, {'Content-Type': 'text/html'});
    response.end(svg);
  }
});

app.listen(app.get('port'), function() {
  console.log("Node app is running at localhost:" + app.get('port'));
});
</pre>

<p>I could just as easily implement this locally in pure JavaScript, of course.</p>

<p>Hosting it in a separate server makes no sense whatsoever as long as it is just for my personal local use.</p>

<p>The server implementation is only of interest once we consider more widespread use, e.g., globally accessible sharing of data retrieved from multiple projects for multiple interested parties.</p>

<p>That is where we are headed as soon as we can &nbsp; :-)</p>

</body>
</html>
