<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <title>The 3D Web Coder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="3dwc.css"/>
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
</head>
<body>

<!--

#3dwebcoder #swig #handlebars #nodejs #expressjs #webgl #3dweb #heroku
akn_include

-->

<h3>Cleaner Node Server REST API Implementation</h3>

<p>My colleague Cyrille Fauvel provided some suggestions for me to apply various best practices to my
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#4">
Node.js WebGL viewer server implementation</a> and its
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#5">
interactive testing framework</a>:</p>

<ul>
<li><a href="#2">Criteria to choose the rendering engine?</a></li>

<!--
<li><a href="#3">Strictly separate content, styles and logic</a></li>
<li><a href="#4">Avoid browser specific JavaScript</a></li>
<li><a href="#6">Use window.location.host to define the base URL</a></li>
<li><a href="#8">Interactive testing framework</a></li>
-->

<li><a href="#5">Eliminate explicit request method checking</a></li>
<li><a href="#7">Complete node.js server implementation</a></li>
<li><a href="#9">Download</a></li>
</ul>



<a name="2"></a>

<h4>Criteria to choose the rendering engine</h4>

<p><strong>Question:</strong> You
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/post-data-and-swig-driven-webgl-viewer-node-server.html#3">
listed a couple of different rendering engines</a>,
then picked Swig, not EJS.
Can you explain why?
I use EJS myself.</p>

<p><strong>Answer:</strong>
I picked the ones that looked smallest and easiest to get started with.
I ended up implementing
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#3">
support for both Swig and Handlebars</a>, with hardly any differences.</p>

<p>Presumably I could add support for EJS equally easily.
I just need to find time to take a look at it.</p>


<!--
<a name="3"></a>

<h4>Strictly Separate Content, Styles and Logic</h4>

<p><strong>Suggestion:</strong> For

<a href="http://the3dwebcoder.typepad.com/blog/2015/04/post-data-and-swig-driven-webgl-viewer-node-server.html#5">
transferring data to the view template</a>,
you "added an <code>onload</code> attribute to the <code>body</code> tag to call the <code>start_render</code> JavaScript function."</p>

<p>You are thus mingling the HTML content and the JavaScript logic of your app.</p>

<p>For best practice, you should always strictly separate content, styles and logic, e.g., HTML, CSS and JavaScript.</p>

<p>Eliminate all style definitions and JavaScript code from the HTML.</p>

<p>Always use <code>class</code> attributes referring CSS style instead of explicit <code>style</code> attributes on the HTML elements.</p>

<p>Instead of adding code to the <code>onload</code> attribute to the <code>body</code> tag, define a jquery document ready handler:</p>

<pre class="prettyprint">
  $(document).ready (function () { ... }) ;
</pre>


<a name="4"></a>

<h4>Avoid Browser Specific JavaScript</h4>

<p><strong>Suggestion:</strong> <code>document.getElementById('p').innerHTML;</code>
is not cross platform.
It will only work in certain browsers, e.g. Chrome.</p>

<p>The jquery method <code>$(â€˜#p).text()</code> is more portable.</p>
-->


<a name="5"></a>

<h4>Eliminate explicit request method checking</h4>

<p><strong>Suggestion:</strong>
I like your incremental API implementation with separate handlers for the routes <code>api/v1</code> and <code>api/v2</code>.</p>

<p>The
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/post-data-and-swig-driven-webgl-viewer-node-server.html#6">
implementation of <code>routes/api.js</code></a> is
not so nice, though, using if clauses testing the request method to distinguish between GET and POST.</p>

<p>How about implementing a separate API router class doing it like this instead:</p>

<pre class="prettyprint">
var express =require ('express') ;
var router1 =express.Router () ;
router1.use (bodyParser.json ()) ;

router1.get ('/', function(req, res) {
    res.send('API v1 GET: Hello World!');
});
router1.post ('/', function(req, res) {
    res.send('API v1 POST: '
      + JSON.stringify(req.body));
});
module.exports.v1 =router1 ;

var router2 =express.Router () ;
router2.use (bodyParser.json ()) ;
router2.get ('/', function(req, res) {
    res.send('API v2 GET: Here belongs a succinct '
      + 'explanation how to use The Building Coder '
      + 'WebGL Viewer REST API v2...');
});
Router2.post ('/', function(req, res) {
    console.log('API v2 POST: ' + JSON.stringify(req.body));
    res.render('viewer', req.body);
});
module.exports.v2 =router2 ;
</pre>

<p>I much prefer this to lots of if clauses which make things hard to read and maintain.</p>

<!--
<a name="6"></a>

<h4>Use window.location.host to Define the Base URL</h4>

<p><strong>Question:</strong> You implemented a Boolean variable and JavaScript helper functions to define the base URL and switch between Heroku and the local host.</p>

<p>You can significantly simplify this by using <code>window.location.host</code> instead.</p>

<p>Setting the base URL to <code>'http://' + window.location.host</code> will work for both local and global URLs, independently of the server, port and everything.</p>

<pre class="prettyprint">
function get_base_url_0016() {
  return 'http://' + window.location.host;
}
</pre>
-->


<a name="7"></a>

<h4>Complete Node.js Server Implementation</h4>

<p>Following Cyrille's advice, I reimplemented the API request handler.</p>

<p>The node.js server still consists of the same three main pieces:</p>

<ul>
<li>The server mainline server.js</li>
<li>The REST API implementation routes/api.js</li>
<li>The Swig or Handlebars viewer template</li>
</ul>

<p>I updated the first two of those according to Cyrille's suggestions.</p>

<p>First, I replaced the if clauses testing the request method in the API implementation and simply returned four separate functions instead of two:</p>

<pre class="prettyprint">
exports.v1get = function(req, res) {
  res.send('API v1 GET: Hello World!');
}

exports.v1post = function(req, res) {
  res.send('API v1 POST: '
    + JSON.stringify(req.body));
}

exports.v2get = function(req, res) {
  res.send('API v2 GET: Here belongs a succinct '
    + 'explanation how to use The Building Coder '
    + 'WebGL Viewer REST API v2...');
}

exports.v2post = function(req, res) {
  console.log('API v2 POST: ' + JSON.stringify(req.body));
  res.render('viewer', req.body);
}
</pre>

<p>Now, in the mainline implementation in server.js, I can provide those four directly to the app get and post functions:</p>

<pre class="prettyprint">
var express = require('express');
var app = express();

app.set('port', (process.env.PORT || 5000));

app.use(express.static(__dirname + '/public'));

app.get('/', function(req, res) {}); // leads to public/index.html

var bodyParser = require('body-parser');
app.use( bodyParser.json({ limit: '1mb' }) );
app.use( bodyParser.urlencoded({ extended: true, limit: '1mb' }) );

app.set('views', __dirname + '/views');

var use_swig_render = false;

if( use_swig_render ) {
  var swig = require('swig');
  app.engine('swig', swig.renderFile);
  app.set('view engine', 'swig');
  swig.setDefaults({ cache: false });
  app.set('view cache', false);
}
else {
  var handlebars = require('express-handlebars');
  app.engine('handlebars', handlebars());
  app.set('view engine', 'handlebars');
}

var api = require('./routes/api');

app.get('/api/v1', api.v1get);
app.post('/api/v1', api.v1post);

app.get('/api/v2', api.v2get);
app.post('/api/v2', api.v2post);

app.listen(app.get('port'), function() {
  console.log('Node WebGL app with '
    + (use_swig_render ? 'swig' : 'handlebars')
    + ' is running at localhost:'
    + app.get('port'));
});
</pre>

<p>The entire functionality seen by the outside world remains completely unchanged, so the previous
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/implementing-node-server-http-post-get-vs-post.html#6">
API v1</a> and the enhanced
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#4">
v2</a> continue to run unaffected and can be exercised from the same unmodified
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#5">
interactive testing framework</a>.</p>


<!--
<a name="8"></a>

<h4>Interactive Testing Framework</h4>

<p>I updated the interactive online testing framework for this based on Cyrille's suggestions as well, removing the Boolean variable to toggle between global and local testing and cleanly separating HTML content, CSS styles and JavaScript logic.</p>

<p>Below is the HTML form for testing the current API version <code>v2</code> GET and POST functionality.</p>

<p>It now uses this much simpler approach to define the base URL:</p>

<pre class="prettyprint">
function get_base_url_0018() {
  return 'http://' + window.location.host;
}
</pre>

<p>Here it is for you to try out live:</p>

<script>
function get_base_url_0018() {
  return 'http://' + window.location.host;
}

function get_api_url_0018() {
  var api_route = '/api/v2';
  return get_base_url_0018() + api_route;
}

function open_node_server_window_0018() {
  var w = 400;
  var h = 400;
  var features = 'width=' + w.toString()
    + ',height=' + h.toString();

  window.open(get_api_url_0018(), 'node_server_0018', features);
}

window.onload = function(e) {
  var baseurl = get_base_url_0018();
  var apiurl = get_api_url_0018();
  document.getElementById('form_0018').action = apiurl;
  document.getElementById('iframe_0018').src = baseurl;
}

function set_wall_data_0018(geometry_data_option) {
  var arrays_cube = {
    position: [ 1, 1, -1,  1, 1, 1,  1, -1, 1,  1, -1, -1,
               -1, 1, 1,  -1, 1, -1,  -1, -1, -1,  -1, -1, 1,
               -1, 1, 1,   1, 1, 1,  1, 1, -1,  -1, 1, -1,
               -1, -1, -1,  1, -1, -1,  1, -1, 1, -1, -1, 1,
                1, 1, 1,   -1, 1, 1,  -1, -1, 1,  1, -1, 1,
               -1, 1, -1,   1, 1, -1,  1, -1, -1,  -1, -1, -1],
    normal:   [ 1, 0, 0,   1, 0, 0,   1, 0, 0,   1, 0, 0,
               -1, 0, 0,  -1, 0, 0,   -1, 0, 0,  -1, 0, 0,
                0, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 0,
                0, -1, 0,  0, -1, 0,  0, -1, 0,  0, -1, 0,
                0, 0, 1,   0, 0, 1,   0, 0, 1,   0, 0, 1,
                0, 0, -1,  0, 0, -1,  0, 0, -1,  0, 0, -1],
    texcoord: [1, 0, 0, 0, 0, 1, 1, 1,
               1, 0, 0, 0, 0, 1, 1, 1,
               1, 0, 0, 0, 0, 1, 1, 1,
               1, 0, 0, 0, 0, 1, 1, 1,
               1, 0, 0, 0, 0, 1, 1, 1,
               1, 0, 0, 0, 0, 1, 1, 1],
    indices:  [0, 1, 2,  0, 2, 3,
               4, 5, 6,  4, 6, 7,
               8, 9, 10,  8, 10, 11,
               12, 13, 14,  12, 14, 15,
               16, 17, 18,  16,  18, 19,
               20, 21, 22,  20, 22, 23]
  };
  var arrays_nil = {
    position: [],
    normal: [],
    indices: []
  };

  var arrays_list = [
    arrays_cube,
    arrays_wall_simple,
    arrays_wall_straight,
    arrays_wall_curved_facets,
    arrays_wall_curved_smooth,
    arrays_nil];

  var arrays = arrays_list[parseInt(geometry_data_option)];

  document.getElementById('position').value = arrays['position'].join(', ');
  document.getElementById('normal').value = arrays['normal'].join(', ');
  document.getElementById('indices').value = arrays['indices'].join(', ');
}
</script>

<center>
<form method="post" id="form_0018" target="node_server_0018">
  <p>Populate with hard-wired wall geometry data:
  <select name="walldata" onchange="set_wall_data_0018(this.form.walldata.value)">
  <option value="0">Cube</option>
  <option value="1">Simple</option>
  <option value="2">Straight</option>
  <option value="3">Curved Facets</option>
  <option value="4">Curved Smooth</option>
  <option value="5">Nil &ndash; Clear All</option>
  </select></p>

  <table>
    <tr><td colspan="2">... or enter your own data:</td></tr>
    <tr><td>position:</td><td><input type="text" id="position" name="position" value="1, 1, -1,  1, 1, 1,  1, -1, 1,  1, -1, -1,  -1, 1, 1,  -1, 1, -1,  -1, -1, -1,  -1, -1, 1,  -1, 1, 1,   1, 1, 1,  1, 1, -1,  -1, 1, -1,  -1, -1, -1,  1, -1, -1,  1, -1, 1, -1, -1, 1,  1, 1, 1,   -1, 1, 1,  -1, -1, 1,  1, -1, 1,  -1, 1, -1,   1, 1, -1,  1, -1, -1,  -1, -1, -1"/></td></tr>
    <tr><td>normal:</td><td><input type="text" id="normal" name="normal" value="1, 0, 0,   1, 0, 0,   1, 0, 0,   1, 0, 0,   -1, 0, 0,  -1, 0, 0,   -1, 0, 0,  -1, 0, 0,   0, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 0,   0, -1, 0,  0, -1, 0,  0, -1, 0,  0, -1, 0,   0, 0, 1,   0, 0, 1,   0, 0, 1,   0, 0, 1,   0, 0, -1,  0, 0, -1,  0, 0, -1,  0, 0, -1"/></td></tr>
    <tr><td>indices:</td><td><input type="text" id="indices" name="indices" value="0, 1, 2,  0, 2, 3,  4, 5, 6,  4, 6, 7,  8, 9, 10,  8, 10, 11,  12, 13, 14,  12, 14, 15,  16, 17, 18,  16,  18, 19,  20, 21, 22,  20, 22, 23"/></td></tr>
    <tr><td></td><td>
      <input value="Get" type="submit" onclick="this.form.method='get';open_node_server_window_0018()"/>
      <input value="Post" type="submit" onclick="this.form.method='post';open_node_server_window_0018('post')"/>
    </td></tr>
  </table>
</form>
</center>

<p>As always, the original non-API-driven version and the API version v1 still work exactly as before; I am enhancing the REST API step by step while preserving complete upward compatibility and keeping the original server running continuously at the same time:</p>

<center>
<iframe id="iframe_0018" style="width: 300px; height: 400px;"></iframe>
</center>
-->


<a name="9"></a>

<h4>Download</h4>

<p>The complete node server implementation is available from the
<a href="https://github.com/jeremytammik/NodeWebGL">NodeWebGL GitHub repo</a>,
and the version discussed here is
<a href="https://github.com/jeremytammik/NodeWebGL/releases/tag/0.2.7">0.2.7</a>.</p>
</body>
</html>