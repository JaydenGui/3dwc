<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <title>The 3D Web Coder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="3dwc.css"/>
  <!--
  <script src="run_prettify.js" type="text/javascript"></script>
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
   -->
  <style type="text/css">p.subtitle { font-style: italic; } </style>
</head>
<body>

<!--

#3dwebcoder #developers #cloud #nodejs #aws #revitapi
#jquery #handlebars #nodejs #expressjs #webgl #3dweb #heroku
akn_include

-->

<h3>Transitioning a Development Team from Desktop to Cloud</h3>

<p>Today, let me pass on to you some observations on how to transition a desktop oriented development team to the cloud.</p>

<p>Today is
<a href="http://en.wikipedia.org/wiki/Ascension_Day">
Ascension Day</a> and
a holiday in Neuch&acirc;tel, giving me a bit of time to clear some of my todo list items, and this article was one of them.</p>

<p>Before getting to that, I'll just briefly mention that I returned safe and sound from the Dubai hackathon and have been pretty busy with Revit stuff since, e.g.,
<a href="http://thebuildingcoder.typepad.com/blog/2015/05/how-to-retrieve-dimensioning-references.html">
how to retrieve dimensioning references</a>,
<a href="http://thebuildingcoder.typepad.com/blog/2015/05/live-development-and-a-share-bar.html#3">
editing and debugging a Revit add-in without restarting</a> and a
<a href="http://thebuildingcoder.typepad.com/blog/2015/05/live-development-and-a-share-bar.html#2">
Share Bar</a>.
I reported on the Dubai hackathon during the weekend, discussing
<a href="http://the3dwebcoder.typepad.com/blog/2015/05/dubai-hackathon-preparation-and-viewer-workshop.html#6">hackathon preparation</a> in general, the
<a href="http://the3dwebcoder.typepad.com/blog/2015/05/dubai-hackathon-preparation-and-viewer-workshop.html#7">View and Data API workshop</a> and the
<a href="http://the3dwebcoder.typepad.com/blog/2015/05/dubai-hackathon-project-presentation-notes.html">hackathon projects presented</a>.</p>

<p>The desktop to cloud transition was completed by an internal Autodesk development team, whose experiences are noted here for other teams wishing to follow suit.</p>


<a name="2"></a>

<h4>Changing the Mindset</h4>

<p class="subtitle">The mental shift needed to move to the cloud, and beyond</p>

<p>Forget about the RTM date.
In the cloud, your modus operandi is to release every day (OK, every week or couple of weeks).
Your deployment does not even require “manufacturing” anymore.
Be prepared to routinely support, fix and upgrade your service after the release.
Deployment process has to be non-interrupting, automatic and inexpensive.
Your service should have sufficient logging and monitoring tools to check the health of the service 24X7.</p>

<a name="3"></a>

<h4>Choosing the right Infrastructure</h4>

<p class="subtitle">OS, middleware and runtime hold the key to success</p>

<p>Linux is the de-facto cloud operating system standard.
But for some tasks, Windows could be a better option.
Choose the right flavour and version of the operating system.
Usually it is <a href="http://www.lynda.com/CentOS-tutorials/Up-Running-CentOS-Linux/159633-2.html">CentOS</a>.
Then choose the right type of Amazon Elastic Compute Cloud
(<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html">EC2</a>) &ndash;
the virtual hardware that will host your service.
Spend time understanding EC2.
Learn how to deploy your images and how to name, boot, suspend, stop, terminate, monitor and troubleshoot your service.
Make really sure you choose your infrastructure right.</p>

<a name="4"></a>

<h4>Managing Security, Identity and Permissions</h4>
<p class="subtitle">Policy, Identity, Information and Infrastructure</p>

<p>If you spend 5% of development time on security in the desktop world, you may spend up to 25% on the different aspects of cloud security.
You have to understand the notion of public and private keys and basic principles of public-key cryptography.
They are an essential element of trust between services and clients of those services.
You mostly need to set up systems for identification and authentication of users, managing your compute tasks (jobs) and storage.
Amazon AWS provides a set of mechanisms around security and permissions for users and groups.
Read about Identity and Access Management (<a href="http://aws.amazon.com/iam">IAM</a>).
You may have to use the IAM to manage access for your team as well as for the other roles to automate processes dealing with Amazon APIs.</p>

<a name="5"></a>

<h4>Building the Service</h4>
<p class="subtitle">Developing and monitoring services in the cloud</p>

<p>If you choose to use Linux you have to embrace a completely different set of habits.
Even if you choose a familiar language (for example, C++) your development environment and tools will likely be different &ndash; from the virtual computer (VMWare or Oracle Virtual Box) to the source code editor.
Also, even if you use C++ for some of your coding it is unlikely that you will use C++ for the interfacing part of your project.
One popular choice is
<a href="https://www.python.org">Python</a> for server side (but for some tasks
<a href="http://nodejs.org">NodeJS</a> is better suited) and obviously
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a> for the client side.
These scripting languages offer lots of free components and libraries.
For example, one of the popular install packages,
<a href="https://www.npmjs.org/">npm</a>,
gives access to over 100,000 modules.
Why so many?
This is mostly because those modules do only one thing, giving you exactly what you want and nothing else.
If you are a front-end developer you have to become a friend of HTML and CSS.
Familiarize yourself with
<a href="http://kafka.apache.org/documentation.html">Kafka</a> for logging and
<a href="http://www.splunk.com">Splunk</a> to know a little bit about the engine behind the analytics.
You should also evaluate whether Perforce, Team Foundation or
<a href="http://git-scm.com">Git</a> is the best tool for your source code control.</p>

<a name="6"></a>

<h4>Continuous Integration and Deployment</h4>
<p class="subtitle">Automatic, non-interrupting and inexpensive</p>

<p>You will need a process that automatically builds and deploys images once the code is reviewed and submitted.
Developers push fresh code to the dev stream and the continuous integration system constantly produces new images.
After testing the dev configuration changes to a devprod stream that contains changes available for beta customers.
When devprod accumulates enough features and stability it gets deployed to staging and finally prod.
The dev configuration is similar to the main code stream in the desktop world.
Devprod is similar to the beta stream.
Staging is similar to release candidate and prod is similar to release.</p>

<p>That's it, in a nutshell.</p>

<p>Easier said than done, of course.</p>

<p>I hope this is useful for you and your team as well.</p>

</body>
</html>
