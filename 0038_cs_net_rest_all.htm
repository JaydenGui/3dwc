<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <title>The 3D Web Coder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="3dwc.css"/>
  <script src="run_prettify.js" type="text/javascript"></script>
  <!--
<script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
   -->
</head>
<body>

<!--

#3dwebcoder #nodejs #revitapi #mongodb #mongoosejs #restapi
#adsk #cloud #expressjs
#adskdevnetwrk
#milanojs
#3dwebaccel #prague #webgl #3dweb #a360
#au2015 #autocad #inventor #ah8 #cubeathens #developers
#aws #revitapi #jquery #handlebars #heroku
akn_include

-->

<h3>C# .NET REST API GET and PUT MongoDB Storage</h3>

<p>Yesterday, I set up MongoDB and the fireratingdb node.js web server driving it on Windows and started populating the database from a desktop C# .NET add-in via its REST API.</p>

<p>Today, let's complete that, adding the door instance documents to the project data:</p>

<ul>
<li><a href="#2">Adding a JSON parser module</a></li>
<li><a href="#3">Storing door instance documents in mongo</a></li>
<li><a href="#4">Using PUT instead of POST when the database id is known</a></li>
<li><a href="#5">Checking for project existence before adding new</a></li>
</ul>


<a name="2"></a>

<h4>Adding a JSON parser module</h4>

<p>Once a project has been added, I need to determine its mongo database id, since the door instances refer to that.</p>

<p>The mongo database id is included in the JSON data returned by the REST API POST request to store the project.</p>

<p>To extract it, I need to parse the JSON data for its <code>_id</code> entry.</p>

<p>.NET offers several possibilities for serialising and deserialising JSON, e.g. the <code>JavaScriptSerializer</code> class provided in the System.Web.Script.Serialization namespace that I used to
<a href="http://the3dwebcoder.typepad.com/blog/2015/07/adding-a-mongodb-document-from-c-net-via-rest-api.html#6">test serialising the project data</a>.</p>

<p>It is not that hard to implement yourself either, though, so I took a look at an existing
<a href="http://techblog.procurios.nl/k/n618/news/view/14605/14863/how-do-i-write-my-own-parser-(for-json).html">personal JSON parser</a> and
integrated that into my project as <code>JsonParser</code>.</p>

<p>It parses the JSON string containing a dictionary object into a hash table, from which I can extract the new project database id like this:</p>

<pre class="code">
&nbsp; <span class="blue">string</span> json = GetProjectDataJson( doc );

&nbsp; <span class="blue">string</span> jsonResponse = PostJsonData( <span class="maroon">&quot;projects&quot;</span>, json );

&nbsp; <span class="blue">object</span> obj = <span class="teal">JsonParser</span>.JsonDecode( jsonResponse );

&nbsp; <span class="blue">if</span>( <span class="blue">null</span> != obj )
&nbsp; {
&nbsp; &nbsp; <span class="teal">Hashtable</span> d = obj <span class="blue">as</span> <span class="teal">Hashtable</span>;
&nbsp; &nbsp; <span class="blue">string</span> project_id = d[<span class="maroon">&quot;_id&quot;</span>] <span class="blue">as</span> <span class="blue">string</span>;

&nbsp; &nbsp; . . .
</pre>


<a name="3"></a>

<h4>Storing Door Instance Documents in Mongo</h4>

<p>Just like for the project data, I opted for a hand-written door instance JSON encoder:</p>

<pre class="code">
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;summary&gt;</span>
&nbsp; <span class="gray">///</span><span class="green"> Retrieve the door instance data to store in </span>
&nbsp; <span class="gray">///</span><span class="green"> the external database and return it as a</span>
&nbsp; <span class="gray">///</span><span class="green"> dictionary in a JSON formatted string.</span>
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;/summary&gt;</span>
&nbsp; <span class="blue">string</span> GetDoorDataJson(
&nbsp; &nbsp; <span class="teal">Element</span> door,
&nbsp; &nbsp; <span class="blue">string</span> project_id,
&nbsp; &nbsp; <span class="teal">Guid</span> paramGuid )
&nbsp; {
&nbsp; &nbsp; <span class="teal">Document</span> doc = door.Document;

&nbsp; &nbsp; <span class="blue">string</span> s = <span class="blue">string</span>.Format(
&nbsp; &nbsp; &nbsp; <span class="maroon">&quot;\&quot;_id\&quot;: \&quot;{0}\&quot;,&quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;\&quot;project_id\&quot;: \&quot;{1}\&quot;,&quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;\&quot;level\&quot;: \&quot;{2}\&quot;,&quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;\&quot;tag\&quot;: \&quot;{3}\&quot;,&quot;</span>
&nbsp; &nbsp; &nbsp; + <span class="maroon">&quot;\&quot;firerating\&quot;: {4}&quot;</span>,
&nbsp; &nbsp; &nbsp; door.UniqueId,
&nbsp; &nbsp; &nbsp; project_id,
&nbsp; &nbsp; &nbsp; doc.GetElement(door.LevelId).Name,
&nbsp; &nbsp; &nbsp; door.get_Parameter( <span class="teal">BuiltInParameter</span>.ALL_MODEL_MARK ).AsString(),
&nbsp; &nbsp; &nbsp; door.get_Parameter( paramGuid ).AsDouble() );

&nbsp; &nbsp; <span class="blue">return</span> <span class="maroon">&quot;{&quot;</span> + s + <span class="maroon">&quot;}&quot;</span>;
&nbsp; }
</pre>

<p>It works fine when called for each door like this:</p>

<pre class="code">
&nbsp; json = GetDoorDataJson( e, project_id, paramGuid );

&nbsp; jsonResponse = PostJsonData( <span class="maroon">&quot;doors&quot;</span>, json );
</pre>


<a name="4"></a>

<h4>Using PUT instead of POST when the Database id is known</h4>

<p>I am explicitly specifying the mongo database id for the door instances by passing in the existing Revit unique id for it.</p>

<p>This obviously causes an error if the same door is added to the database twice.</p>

<p>In theory, I could &ndash; and maybe should &ndash; check first whether a given item already exists; if so, find it and PUT, otherwise POST the data.</p>

<p>Reading up on the issue in the Stack Overflow thread on
<a href="http://stackoverflow.com/questions/18470588/in-rest-is-post-or-put-best-suited-for-upsert-operation">
REST POST or PUT best suited for upsert operation</a>, I learn:</p>

<p>According to the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6">HTTP specification</a>, the PUT method requests that the enclosed entity be stored under the supplied request URI. If it refers to an already existing resource, the enclosed entity should be considered as a modified version of the one residing on the origin server. If it does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.</p>

<p>The defining difference between a PUT and a POST is that PUT is an idempotent operation. If it can safely be executed repeatedly without side effects, than a PUT is a valid restful verb to use.</p>

<p>So, I modified the <code>PostJsonData</code> that I defined yesterday to
<a href="http://the3dwebcoder.typepad.com/blog/2015/07/adding-a-mongodb-document-from-c-net-via-rest-api.html#4">
store a document using POST</a> to handle both PUT and POST, and accordingly renamed it to <code>UpsertDocument</code>:</p>

<pre class="code">
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;summary&gt;</span>
&nbsp; <span class="gray">///</span><span class="green"> PUT or POST JSON document data to </span>
&nbsp; <span class="gray">///</span><span class="green"> the specified mongoDB collection.</span>
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;/summary&gt;</span>
&nbsp; <span class="blue">string</span> UpsertDocument(
&nbsp; &nbsp; <span class="blue">string</span> collection_name_id,
&nbsp; &nbsp; <span class="blue">string</span> json,
&nbsp; &nbsp; <span class="blue">string</span> method )
&nbsp; {
&nbsp; &nbsp; <span class="blue">string</span> uri = <span class="teal">Util</span>.RestApiUri + <span class="maroon">&quot;/&quot;</span> + collection_name_id;
&nbsp;
&nbsp; &nbsp; <span class="teal">HttpWebRequest</span> request = <span class="teal">HttpWebRequest</span>.Create(
&nbsp; &nbsp; &nbsp; uri ) <span class="blue">as</span> <span class="teal">HttpWebRequest</span>;
&nbsp;
&nbsp; &nbsp; request.ContentType = <span class="maroon">&quot;application/json; charset=utf-8&quot;</span>;
&nbsp; &nbsp; request.Accept = <span class="maroon">&quot;application/json, text/javascript, */*&quot;</span>;
&nbsp; &nbsp; request.Method = method;
&nbsp;
&nbsp; &nbsp; <span class="blue">using</span>( <span class="teal">StreamWriter</span> writer = <span class="blue">new</span> <span class="teal">StreamWriter</span>(
&nbsp; &nbsp; &nbsp; request.GetRequestStream() ) )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; writer.Write( json );
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; <span class="teal">WebResponse</span> response = request.GetResponse();
&nbsp; &nbsp; <span class="teal">Stream</span> stream = response.GetResponseStream();
&nbsp; &nbsp; <span class="blue">string</span> jsonResponse = <span class="blue">string</span>.Empty;
&nbsp;
&nbsp; &nbsp; <span class="blue">using</span>( <span class="teal">StreamReader</span> reader = <span class="blue">new</span> <span class="teal">StreamReader</span>(
&nbsp; &nbsp; &nbsp; stream ) )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">while</span>( !reader.EndOfStream )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; jsonResponse += reader.ReadLine();
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">return</span> jsonResponse;
&nbsp; }
</pre>

<p>The first argument specifies either just a mongo collection name, in the case of POST, or includes an appended id, for PUT.</p>

<p>Now I can use it like this to either insert new doors or update existing ones:</p>

<pre class="code">
&nbsp; json = GetDoorDataJson( e, project_id,
&nbsp; &nbsp; paramGuid );
&nbsp;
&nbsp; jsonResponse = UpsertDocument(
&nbsp; &nbsp; <span class="maroon">&quot;doors/&quot;</span> + e.UniqueId, json, <span class="maroon">&quot;PUT&quot;</span> );
</pre>

<p>The response returned by the PUT operation no longer lists the entire data record, but just says <code>Accepted</code> instead.</p>



<a name="5"></a>

<h4>Checking for Project Existence Before Adding New</h4>

<p>We have one remaining issue to fix.</p>

<p>Currently, our POST operation generates a new project document every time we run it.</p>

<p>We obviously need to check whether a project already exists in the database and update its existing document, if so, before adding a new one.</p>

<p>I already mentioned that it is not completely obvious how to
<a href="http://the3dwebcoder.typepad.com/blog/2015/07/implementing-mongo-database-relationships.html#2">identify a Revit project</a>,
which is why we are letting mongo generate a database id for it for us in the first place.</p>

<p>In my simple case, I can use the ProjectInfo singleton's UniqueId.</p>

<p>I'll use that to check whether a project has been added to the database.</p>

<p>If so, I retrieve its database id and use PUT to update its data; otherwise, I create it from scratch using POST.</p>

<p>Therefore, first of all, my node.js database web server needs to implement a new method for looing up a project by ProjectInfo UniqueId.</p>

<p>That is easily achieved by adding this new method to the project controller module:</p>

<pre class="prettyprint">
exports.findByUniqueId = function(req, res){
  var uid = req.params.uid;
  Project.findOne({'projectinfo_uid':uid},function(err, result) {
    return res.send(result);
  });
};
</pre>

<p>I obviously also add the corresponding REST API route is added to routes.js:</p>

<pre class="prettyprint">
module.exports = function(app) {

  . . .

  app.get('/api/v1/projects/uid/:uid', projects.findByUniqueId);

  . . .

}
</pre>

<p>Yet again, I enhance and rename .NET request handler method, now to handle GET as well as PUT and POST, this time renaming it to <code>QueryOrUpsert</code>:</p>

<pre class="code">
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;summary&gt;</span>
&nbsp; <span class="gray">///</span><span class="green"> GET, PUT or POST JSON document data from or to </span>
&nbsp; <span class="gray">///</span><span class="green"> the specified mongoDB collection.</span>
&nbsp; <span class="gray">///</span><span class="green"> </span><span class="gray">&lt;/summary&gt;</span>
&nbsp; <span class="blue">string</span> QueryOrUpsert(
&nbsp; &nbsp; <span class="blue">string</span> collection_name_id_query,
&nbsp; &nbsp; <span class="blue">string</span> json,
&nbsp; &nbsp; <span class="blue">string</span> method )
&nbsp; {
&nbsp; &nbsp; <span class="blue">string</span> uri = <span class="teal">Util</span>.RestApiUri + <span class="maroon">&quot;/&quot;</span> + collection_name_id_query;
&nbsp;
&nbsp; &nbsp; <span class="teal">HttpWebRequest</span> request = <span class="teal">HttpWebRequest</span>.Create(
&nbsp; &nbsp; &nbsp; uri ) <span class="blue">as</span> <span class="teal">HttpWebRequest</span>;
&nbsp;
&nbsp; &nbsp; request.ContentType = <span class="maroon">&quot;application/json; charset=utf-8&quot;</span>;
&nbsp; &nbsp; request.Accept = <span class="maroon">&quot;application/json, text/javascript, */*&quot;</span>;
&nbsp; &nbsp; request.Timeout = <span class="teal">Util</span>.Timeout;
&nbsp; &nbsp; request.Method = method;
&nbsp;
&nbsp; &nbsp; <span class="blue">if</span>( 0 &lt; json.Length )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="teal">Debug</span>.Assert( !method.Equals( <span class="maroon">&quot;GET&quot;</span> ),
&nbsp; &nbsp; &nbsp; &nbsp; <span class="maroon">&quot;content is not allowed with GET&quot;</span> );
&nbsp;
&nbsp; &nbsp; &nbsp; <span class="blue">using</span>( <span class="teal">StreamWriter</span> writer = <span class="blue">new</span> <span class="teal">StreamWriter</span>(
&nbsp; &nbsp; &nbsp; &nbsp; request.GetRequestStream() ) )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; writer.Write( json );
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="teal">WebResponse</span> response = request.GetResponse();
&nbsp; &nbsp; <span class="teal">Stream</span> stream = response.GetResponseStream();
&nbsp; &nbsp; <span class="blue">string</span> jsonResponse = <span class="blue">string</span>.Empty;
&nbsp;
&nbsp; &nbsp; <span class="blue">using</span>( <span class="teal">StreamReader</span> reader = <span class="blue">new</span> <span class="teal">StreamReader</span>(
&nbsp; &nbsp; &nbsp; stream ) )
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; <span class="blue">while</span>( !reader.EndOfStream )
&nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; jsonResponse += reader.ReadLine();
&nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="blue">return</span> jsonResponse;
&nbsp; }
</pre>

<p>This code uses it to check for the existing project, then either updating it or adding a new one:</p>

<pre class="code">
&nbsp; <span class="blue">object</span> obj;
&nbsp; <span class="teal">Hashtable</span> d;
&nbsp; <span class="blue">string</span> project_id;
&nbsp;
&nbsp; <span class="blue">string</span> json = GetProjectDataJson( doc );
&nbsp;
&nbsp; <span class="blue">string</span> query = <span class="maroon">&quot;projects/uid/&quot;</span>
&nbsp; &nbsp; + doc.ProjectInformation.UniqueId;
&nbsp;
&nbsp; <span class="blue">string</span> jsonResponse = QueryOrUpsert( query,
&nbsp; &nbsp; <span class="blue">string</span>.Empty, <span class="maroon">&quot;GET&quot;</span> );
&nbsp;
&nbsp; <span class="blue">if</span>( 0 &lt; jsonResponse.Length )
&nbsp; {
&nbsp; &nbsp; obj = <span class="teal">JsonParser</span>.JsonDecode(
&nbsp; &nbsp; &nbsp; jsonResponse );
&nbsp;
&nbsp; &nbsp; d = obj <span class="blue">as</span> <span class="teal">Hashtable</span>;
&nbsp; &nbsp; project_id = d[<span class="maroon">&quot;_id&quot;</span>] <span class="blue">as</span> <span class="blue">string</span>;
&nbsp;
&nbsp; &nbsp; jsonResponse = QueryOrUpsert(
&nbsp; &nbsp; &nbsp; <span class="maroon">&quot;projects/&quot;</span> + project_id, json, <span class="maroon">&quot;PUT&quot;</span> );
&nbsp; }
&nbsp; <span class="blue">else</span>
&nbsp; {
&nbsp; &nbsp; jsonResponse = QueryOrUpsert(
&nbsp; &nbsp; &nbsp; <span class="maroon">&quot;projects&quot;</span>, json, <span class="maroon">&quot;POST&quot;</span> );
&nbsp; }
</pre>

<p>I incremented the version number of the fireratingdb node.js server to
<a href="https://github.com/jeremytammik/firerating/releases/tag/0.0.7">release 0.0.7</a> in the
<a href="https://github.com/jeremytammik/firerating">fireratingdb GitHub repository</a>.</p>

<p>The Revit add-in implementing the C# .NET code discussed above is provided in
<a href="https://github.com/jeremytammik/FireRatingCloud/releases/tag/2016.0.0.4">release 2016.0.0.4</a> in the
<a href="https://github.com/jeremytammik/FireRatingCloud">FireRatingCloud GitHub repository</a>.</p>

<p>Now, obviously, the next step is to read back data from the database and update the externally modified door instance fire rating values in the Revit building model.</p>

</body>
</html>
