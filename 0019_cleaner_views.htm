<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
  <title>The 3D Web Coder</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="3dwc.css"/>
  <!-- <script src="run_prettify.js" type="text/javascript"></script> -->
  <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
</head>
<body>

<!--

#3dwebcoder #jquery #handlebars #nodejs #expressjs #webgl #3dweb #heroku
akn_include

-->

<h3>Radical Node Server View and Heroku Push Cleanup</h3>

<p>Two days ago, I implemented an
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/cleaner-node-server-rest-api-implementation.html">
enhancement to the node server REST API</a> of my
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#4">
WebGL viewer</a> and its
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#5">
interactive testing framework</a> suggested
by my colleague Cyrille Fauvel.</p>

<p>He also suggested applying a whole host of other best practices to separate content, styles and logic.</p>

<p>I am quite impressed that I succeeded in breaking so many rules implementing such a small project.</p>

<p>I am very happy and find it extremely important to get them corrected early on.</p>

<p>Many thanks to Cyrille for taking such a deep look!</p>

<p>Here are some of the things he pointed out:</p>

<ul>
<li><a href="#2">Automatically push to Heroku on each push to GitHub</a></li>
<li><a href="#3">Strictly separate content, styles and logic</a></li>
<li><a href="#4">Avoid browser specific JavaScript</a></li>
<li><a href="#5">Retrieving a JavaScript Library via CDN for Efficient Content Delivery</a></li>
<li><a href="#6">Programmatically Setting HTML Tag Attributes</a></li>
<li><a href="#7">Loading JavaScript modules into the viewer template</a></li>
<li><a href="#8">Storing the shaders in separate JavaScript modules</a></li>

<!-- <li><a href="#9">Transferring the Geometry Data Directly Into JavaScript Variables</a></li> -->

<li><a href="#10">Complete node.js server implementation</a></li>
<li><a href="#11">Interactive testing framework</a></li>
<li><a href="#12">Download</a></li>
</ul>


<a name="2"></a>

<h4>Automatically Push to Heroku on Each Push to GitHub</h4>

<p>I fiddled around quite a bit two weeks ago to find the best way to
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/webgl-node-server-with-github-and-heroku-repo-sync.html#3">
synchronise my Heroku repository with GitHub</a>.</p>

<p>I was quite happy to get it down to the four lines I listed in my solution to fixing the
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#2">
request entity too large</a> error:</p>

<pre>
  $ git add server.js
  $ git commit -m "raised body parser limit to 1mb to fix error: request entity too large"
  $ git push git master
  $ git push heroku master
</pre>

<p>Cyrille pointed out that there is a better way to achieve this with even less effort, officially supported by Heroku:</p>

<blockquote>
<p>You know there is a built-in GitHub connection, right?
So you do not need to do anything at all.
The GitHub RSS feed will tell Heroku to rebuild the site anytime you do a push.
This is OK for a repo where you do not need to customise.
You obviously cannot use it for anything private, e.g., secret API keys etc.</p>
</blockquote>

<p>To activate
<a href="https://devcenter.heroku.com/articles/github-integration#automatic-deploys">
automatic Heroku deploys</a> directly from each GitHub push, go to your Heroku app page, e.g.,
<a href="https://dashboard.heroku.com/apps">Heroku apps</a> &gt; app name &gt; Deploy &gt; GitHub &gt; Connect to GitHub:</p>

<center>
<img src="img/heroku_github_deploy.png" alt="Automatic Heroku deployment directly from GitHub repo" width="380"/>
</center>

<p>I went ahead accordingly and specified automatic deployment of the <code>nameless-harbor-7576</code> Heroku app from the <code>master</code> branch of the
<a href="https://github.com/jeremytammik/NodeWebGL">NodeWebGL GitHub repo</a>.</p>

<p>For safety's sake, I also immediately created a second <code>development</code> branch to ensure I have the option of pushing experimental changes to GitHub without triggering a new Heroku deployment every time.</p>



<a name="3"></a>

<h4>Strictly Separate Content, Styles and Logic</h4>

<p><strong>Suggestion:</strong> For

<a href="http://the3dwebcoder.typepad.com/blog/2015/04/post-data-and-swig-driven-webgl-viewer-node-server.html#5">
transferring data to the view template</a>,
you "added an <code>onload</code> attribute to the <code>body</code> tag to call the <code>start_render</code> JavaScript function."</p>

<p>You are thus mingling the HTML content and the JavaScript logic of your app.</p>

<p>For best practice, you should always strictly separate content, styles and logic, e.g., HTML, CSS and JavaScript.</p>

<p>Eliminate all style definitions and JavaScript code from the HTML.</p>

<p>Always use <code>class</code> attributes referring CSS style instead of explicit <code>style</code> attributes on the HTML elements.</p>

<p>Instead of adding code to the <code>onload</code> attribute to the <code>body</code> tag, define a jquery document ready handler:</p>

<pre class="prettyprint">
  $(document).ready (function () { ... }) ;
</pre>


<a name="4"></a>

<h4>Avoid Browser Specific JavaScript</h4>

<p><strong>Suggestion:</strong> <code>document.getElementById('p').innerHTML;</code>
is not cross platform.
It will only work in certain browsers, e.g. Chrome.</p>

<p>The jquery method <code>$('#p').text()</code> is more portable.</p>


<a name="5"></a>

<h4>Retrieving a JavaScript Library via CDN for Efficient Content Delivery</h4>

<p>Implementation of the clean separation of content, styles and logic in a portable manner as suggested by Cyrille requires the use of the
<a href="http://jquery.com">jquery</a> JavaScript
library.</p>

<p>It provides easy, fast, small, feature-rich support for HTML document traversal, manipulation, event handling, animation, and Ajax that works across a multitude of browsers.</p>

<p>So where do I get it from?</p>

<p>I mean, where does my web page get it from?</p>

<p>To be more precise, each and every one of my web pages will need to retrieve it.</p>

<p>Obviously, it would be nice to serve up this ubiquitous library with maximum efficiency.</p>

<p>Enter CDN, the
<a href="https://en.wikipedia.org/wiki/Content_delivery_network">
content delivery network</a>,
a large distributed system of servers deployed in multiple data centres to serve content to end-users with high availability and high performance.</p>

<p>I will grab my version of jquery from the
<a href="https://developers.google.com/speed/libraries">Google Hosted Libraries CDN</a>.</p>




<a name="6"></a>

<h4>Programmatically Setting HTML Tag Attributes</h4>

<p>In my testing framework HTML, I define a form with the id 'form_0019' and an iframe with 'iframe_0019'.</p>

<p>My initial code was using these non-portable statements to set their action and src attributes, respectively:</p>

<pre class="prettyprint">
  document.getElementById('form_0019').action = apiurl;
  document.getElementById('iframe_0019').src = baseurl;
</pre>

<p>My first attempt at changing this to become more portable by using jquery looked like this:</p>

<pre class="prettyprint">
  $('#form_0019').action = apiurl;
  $('#iframe_0019').src = baseurl;
</pre>

<p>This does indeed create an 'action' and a 'src' field, but in the wrong place, having no effect.</p>

<p>I found the proper solution to this by reading the Stack Overflow thread on
<a href="http://stackoverflow.com/questions/979024/changing-the-action-of-a-form-with-javascript-jquery">
changing the action of a form with jquery</a> and
taking a close look at the contents of the different elements involved in the Chrome JavaScript debugger:</p>

<pre class="prettyprint">
  $('#form_0019').get(0).setAttribute('action', apiurl);
  $('#iframe_0019').get(0).setAttribute('src', baseurl);
</pre>

<p>Similarly, I had three input fields for the geometry data whose values were being set like this:</p>

<pre class="prettyprint">
  document.getElementById('position').value = arrays['position'].join(', ');
  document.getElementById('normal').value = arrays['normal'].join(', ');
  document.getElementById('indices').value = arrays['indices'].join(', ');
</pre>

<p>Initially, I tried to use these jquery statements:</p>

<pre class="prettyprint">
  $('#position').value = arrays['position'].join(', ');
  $('#normal').value = arrays['normal'].join(', ');
  $('#indices').value = arrays['indices'].join(', ');
</pre>

<p>That did not work.</p>

<p>Analogously to above, I need to go one level deeper to get at the HTML element I am after:</p>

<pre class="prettyprint">
  $('#position').get(0).value = arrays['position'].join(', ');
  $('#normal').get(0).value = arrays['normal'].join(', ');
  $('#indices').get(0).value = arrays['indices'].join(', ');
</pre>



<a name="7"></a>

<h4>Loading JavaScript Modules into the Viewer Template</h4>

<p>In my initial implementation, I had trouble loading the TWGL JavaScript module <code>twgl-full.min.js</code> into the viewer template, <code>viewer.swig</code> or <code>viewer.handlebars</code>.</p>

<p>Cyrille resolved that by adding a preceding slash:</p>

<pre class="prettyprint">
  &lt;script src="/twgl-full.min.js"&gt;&lt;/script&gt;
</pre>

<p>Rather trivial.</p>

<p>Much more importantly, though, that means that I can now happily and freely use JavaScript in separate modules throughout the viewer template, as required for further and cleaner separation of content, style and logic.</p>

<p>For instance, we can split out the vertex and fragment shaders into separate modules.</p>



<a name="8"></a>

<h4>Storing the Shaders in Separate JavaScript Modules</h4>

<p>In Cyrille's words:</p>
<p>You cannot really move the shaders, because they are not real JavaScript.
They are strings passed into the WebGL framework and interpreted there.
Workaround: use <a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29">ajax</a> to load them.
Save each shader script as a JavaScript module and add a reference to it, e.g. like this:</p>

<pre class="prettyprint">
  &lt;script src="/vs.js" id="vs" type="x-shader/x-vertex"&gt;&lt;/script&gt;
  &lt;script src="/fs.js" id="fs" type="x-shader/x-fragment"&gt;&lt;/script&gt;
</pre>

<p>The browser will ignore this initially.
Then, in the viewer.js JavaScript code, <code>$.ajax</code> uses the script tag from the HTML file to know where to put the shader content.
It makes an ajax call to the server and asks it to return the content, which is returned as a string.
You can use that when creating the WebGL program info by passing in the string content instead of the script tag.
The <code>createProgramInfo</code> function takes either the id of the shader script or a string defining the code directly:</p>

<pre class="prettyprint">
  programInfo = twgl.createProgramInfo ( gl,
    [ shadersHolder.vertex, shadersHolder.fragment ]);
</pre>

<p>Here is the code implementing using ajax to load the shader strings into the <code>shadersHolder</code> dictionary:</p>

<pre class="prettyprint">
var shadersLoaderCount =0 ;
var shadersHolder ={ vertex: '', fragment: '' } ;

function loadShader (shader, type) {
  var $shader =$(shader) ;
  $.ajax ({
    url: $shader [0].src,
    dataType: 'text',
    context: {
      name: $shader [0].id,
      type: type
    },
    complete: processShader
  }) ;
}

function processShader (jqXHR, textStatus) {
  shadersLoaderCount-- ;
  shadersHolder [this.context.type] =jqXHR.responseText ;

  if ( !shadersLoaderCount )
    shadersLoadComplete () ;
}

function shadersLoadComplete () {
  start_render () ;
}

$(document).ready (function () {
  var vertexShaders =$('script[type="x-shader/x-vertex"]') ;
  var fragmentShaders =$('script[type="x-shader/x-fragment"]') ;
  shadersLoaderCount =vertexShaders.length + fragmentShaders.length ;

  loadShader (vertexShaders [0], 'vertex') ;
  loadShader (fragmentShaders [0], 'fragment') ;
}) ;
</pre>

<p>By the way, what are these shaders for, briefly?</p>

<p>A vertex shader determines the colour of a point.
A fragment shader interpolates between points to determine how to render a face.
Usually vertex is assigned colour, and fragment is assigned a texture or interpolates the vertex colours.
Here we use global
<a href="https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model">Blinn or Phong shaders</a>.
You could create separate shaders for different pieces of geometry.
In that case, use an approach like this ajax method helps and enables you to use tons of different shaders without having to include them all in the scene.</p>



<!--
<a name="9"></a>

<h4>Transferring the Geometry Data Directly Into JavaScript Variables</h4>

having the p, n and i ids shows the data in the DOM
some data you do not want to share
in that case you can use ajax instead.
ajax can say6 send me the data as a json object, pure data, no tags, nothing.
another way would be to create a script tag and assign the variables directly.
just assign them as javascript code directly.
</pre>
-->


<a name="10"></a>

<h4>Complete Node.js Server Implementation</h4>

<p>With all of that in place, the entire implementation looks much nicer and cleaner!</p>

<p>A bunch of new JavaScript modules all live in the <code>public</code> folder:</p>

<ul>
<li>fs.js</li>
<li>jquery-1.3.2.min.js</li>
<li>twgl-full.min.js</li>
<li>viewer.js</li>
<li>vs.js</li>
</ul>

<p>The Handlebars view template pulling in the jquery and TWGL libraries, the shaders and the main viewer logic from separate JavaScript modules is tremendously much shorter:</p>

<pre class="prettyprint">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf8"&gt;
    &lt;title&gt;The Building Coder WebGL Viewer&lt;/title&gt;
    &lt;style&gt;
      html, body, canvas {
        margin: 0px;
        width: 100%;
        height: 100%;
        overflow: hidden;
      }
      p {
        display: none;
      }
    &lt;/style&gt;

    &lt;script src="/jquery-1.3.2.min.js"&gt;&lt;/script&gt;
    &lt;script src="/twgl-full.min.js"&gt;&lt;/script&gt;

    &lt;script src="/vs.js" id="vs" type="x-shader/x-vertex"&gt;&lt;/script&gt;
    &lt;script src="/fs.js" id="fs" type="x-shader/x-fragment"&gt;&lt;/script&gt;
    &lt;script src="/viewer.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;p id="p"&gt;{{ position}}&lt;/p&gt;
      &lt;p id="n"&gt;{{normal}}&lt;/p&gt;
      &lt;p id="i"&gt;{{indices}}&lt;/p&gt;
      &lt;canvas id="c"&gt;&lt;/canvas&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>The API request handler is split up into two separate modules for v1 and v2:</p>

<ul>
<li>routes/apiv1.js</li>
<li>routes/apiv2.js</li>
</ul>

<p>The only one of interest to us is v2, which now just exports two functions:</p>

<pre class="prettyprint">
exports.get = function(req, res) {
  res.send('API v2 GET: Here belongs a succinct '
    + 'explanation how to use The Building Coder '
    + 'WebGL Viewer REST API v2...');
}

exports.post = function(req, res) {
  console.log('API v2 POST: ' + JSON.stringify(req.body));
  res.render('viewer', req.body);
}
</pre>

<p>Finally, the heart of the matter, the mainline node server implementation in server.js now looks like this:</p>

<pre class="prettyprint">
var express = require('express');
var app = express();

app.set('port', (process.env.PORT || 5000));

app.use(express.static(__dirname + '/public'));

app.get('/', function(req, res) {}); // leads to public/index.html

var bodyParser = require('body-parser');
app.use( bodyParser.json({ limit: '1mb' }) );
app.use( bodyParser.urlencoded({ extended: true, limit: '1mb' }) );

app.set('views', __dirname + '/views');

var use_swig_render = false;

if( use_swig_render ) {
  var swig = require('swig');
  app.engine('swig', swig.renderFile);
  app.set('view engine', 'swig');
  swig.setDefaults({ cache: false });
  app.set('view cache', false);
}
else {
  var handlebars = require('express-handlebars');
  app.engine('handlebars', handlebars());
  app.set('view engine', 'handlebars');
}

var apiv1 = require('./routes/apiv1');

app.get('/api/v1', apiv1.get);
app.post('/api/v1', apiv1.post);

var apiv2 = require('./routes/apiv2');

app.get('/api/v2', apiv2.get);
app.post('/api/v2', apiv2.post);

app.listen(app.get('port'), function() {
  console.log('Node WebGL app with '
    + (use_swig_render ? 'swig' : 'handlebars')
    + ' is running at localhost:'
    + app.get('port'));
});
</pre>

<p>The entire functionality seen by the outside world remains completely unchanged, so the previous
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/implementing-node-server-http-post-get-vs-post.html#6">
API v1</a> and the enhanced
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#4">
v2</a> continue to run unaffected and can be exercised from the same unmodified
<a href="http://the3dwebcoder.typepad.com/blog/2015/04/node-server-rendering-using-either-swig-and-handlebars.html#5">
interactive testing framework</a>.</p>


<a name="11"></a>

<h4>Interactive Testing Framework</h4>

<p>As if that was not enough, I also started updating the interactive online testing framework for this based on Cyrille's suggestions.</p>

<p>I have not gotten around to the cleaner separation of HTML content, CSS styles and JavaScript logic yet, but at least I replaced the non-portable <code>document.getElementById</code> by jquery statements as described <a href="#6">above</a>.</p>

<p>Here is the HTML form for testing the current API version <code>v2</code> GET and POST functionality.</p>

<p><i>Please load this blog post as an individual post to allow these forms to work correctly.
If you are in the main blog view listing multiple posts, they can interfere with previous similar definitions and get confused.</i></p>

<script src="http://the3dwebcoder.typepad.com/files/set_wall_data_0019.js" type="text/javascript"></script>

<!-- <script src="./files/set_wall_data_0019.js" type="text/javascript"></script> -->

<script>
// to switch between heroku and localhost,
// toggle the Boolean 'local' variable below

function get_base_url_0019() {
  var local = false;
  return local
    ? 'http://localhost:5000'
    : 'https://nameless-harbor-7576.herokuapp.com';
}

function get_api_url_0019() {
  var api_route = '/api/v2';
  return get_base_url_0019() + api_route;
}

function open_node_server_window_0019() {
  var w = 400;
  var h = 400;
  var features = 'width=' + w.toString()
    + ',height=' + h.toString();

  window.open(get_api_url_0019(), 'node_server_0019', features);
}

window.onload = function(e) {
  var baseurl = get_base_url_0019();
  var apiurl = get_api_url_0019();
  //document.getElementById('form_0019').action = apiurl;
  //document.getElementById('iframe_0019').src = baseurl;
  var f = $('#form_0019');
  //x.action = apiurl; // creates an 'action' field that has no effect
  //http://stackoverflow.com/questions/979024/changing-the-action-of-a-form-with-javascript-jquery
  f.get(0).setAttribute('action', apiurl);
  f = $('#iframe_0019');
  f.get(0).setAttribute('src', baseurl);
}

function set_wall_data_0019(geometry_data_option) {
  var arrays = arrays_list[parseInt(geometry_data_option)];

  //document.getElementById('position').value = arrays['position'].join(', ');
  //document.getElementById('normal').value = arrays['normal'].join(', ');
  //document.getElementById('indices').value = arrays['indices'].join(', ');
  var p = $('#position');
  p.get(0).value = arrays['position'].join(', ');
  $('#normal').get(0).value = arrays['normal'].join(', ');
  $('#indices').get(0).value = arrays['indices'].join(', ');
}
</script>

<center>
<form method="post" id="form_0019" target="node_server_0019">
  <p>Populate with hard-wired wall geometry data:
  <select name="walldata" onchange="set_wall_data_0019(this.form.walldata.value)">
  <option value="0">Cube</option>
  <option value="1">Simple</option>
  <option value="2">Straight</option>
  <option value="3">Curved Facets</option>
  <option value="4">Curved Smooth</option>
  <option value="5">Nil &ndash; Clear All</option>
  </select></p>

  <table>
    <tr><td colspan="2">... or enter your own data:</td></tr>
    <tr><td>position:</td><td><input type="text" id="position" name="position" value="1, 1, -1,  1, 1, 1,  1, -1, 1,  1, -1, -1,  -1, 1, 1,  -1, 1, -1,  -1, -1, -1,  -1, -1, 1,  -1, 1, 1,   1, 1, 1,  1, 1, -1,  -1, 1, -1,  -1, -1, -1,  1, -1, -1,  1, -1, 1, -1, -1, 1,  1, 1, 1,   -1, 1, 1,  -1, -1, 1,  1, -1, 1,  -1, 1, -1,   1, 1, -1,  1, -1, -1,  -1, -1, -1"/></td></tr>
    <tr><td>normal:</td><td><input type="text" id="normal" name="normal" value="1, 0, 0,   1, 0, 0,   1, 0, 0,   1, 0, 0,   -1, 0, 0,  -1, 0, 0,   -1, 0, 0,  -1, 0, 0,   0, 1, 0,   0, 1, 0,   0, 1, 0,   0, 1, 0,   0, -1, 0,  0, -1, 0,  0, -1, 0,  0, -1, 0,   0, 0, 1,   0, 0, 1,   0, 0, 1,   0, 0, 1,   0, 0, -1,  0, 0, -1,  0, 0, -1,  0, 0, -1"/></td></tr>
    <tr><td>indices:</td><td><input type="text" id="indices" name="indices" value="0, 1, 2,  0, 2, 3,  4, 5, 6,  4, 6, 7,  8, 9, 10,  8, 10, 11,  12, 13, 14,  12, 14, 15,  16, 17, 18,  16,  18, 19,  20, 21, 22,  20, 22, 23"/></td></tr>
    <tr><td></td><td>
      <input value="Get" type="submit" onclick="this.form.method='get';open_node_server_window_0019()"/>
      <input value="Post" type="submit" onclick="this.form.method='post';open_node_server_window_0019('post')"/>
    </td></tr>
  </table>
</form>
</center>

<p>As always, the original non-API-driven version and the API version v1 still work exactly as before; I am enhancing the REST API step by step while preserving complete upward compatibility and keeping the original server running continuously at the same time:</p>

<center>
<iframe id="iframe_0019" style="width: 300px; height: 400px;"></iframe>
</center>


<a name="12"></a>

<h4>Download</h4>

<p>The complete node server implementation is available from the
<a href="https://github.com/jeremytammik/NodeWebGL">NodeWebGL GitHub repo</a>,
and the version discussed here is
<a href="https://github.com/jeremytammik/NodeWebGL/releases/tag/0.2.8">0.2.8</a>.</p>

<p>The testing framework is defined right here on this page.</p>

<p>Simply view source or reload the page in the JavaScript debugger to explore it in more depth.</p>
</body>
</html>
